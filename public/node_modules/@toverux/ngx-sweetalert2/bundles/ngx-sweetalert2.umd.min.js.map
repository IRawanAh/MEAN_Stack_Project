{"version":3,"file":"ngx-sweetalert2.umd.min.js","sources":["~/@toverux/ngx-sweetalert2/swal-partial-targets.ts","~/@toverux/ngx-sweetalert2/di.ts","~/@toverux/ngx-sweetalert2/swal.component.ts","~/@toverux/ngx-sweetalert2/swal.directive.ts","~/@toverux/ngx-sweetalert2/swal-partial.component.ts","~/@toverux/ngx-sweetalert2/swal-partial.directive.ts","~/@toverux/ngx-sweetalert2/sweetalert2.module.ts"],"sourcesContent":["import swal from 'sweetalert2';\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\npublic readonly title = () => swal.getTitle();\npublic readonly content = () => swal.getContent();\n/**\n * @deprecated Will be removed in the next major version, please use {\\@link SwalPartialTargets#actions} instead.\n */\npublic readonly buttonsWrapper = () => swal.getButtonsWrapper();\npublic readonly actions = () => swal.getActions();\npublic readonly confirmButton = () => swal.getConfirmButton();\npublic readonly cancelButton = () => swal.getCancelButton();\npublic readonly footer = () => swal.getFooter();\n}\n\nfunction SwalPartialTargets_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialTargets.prototype.title;\n/** @type {?} */\nSwalPartialTargets.prototype.content;\n/**\n * @deprecated Will be removed in the next major version, please use {\\@link SwalPartialTargets#actions} instead.\n * @type {?}\n */\nSwalPartialTargets.prototype.buttonsWrapper;\n/** @type {?} */\nSwalPartialTargets.prototype.actions;\n/** @type {?} */\nSwalPartialTargets.prototype.confirmButton;\n/** @type {?} */\nSwalPartialTargets.prototype.cancelButton;\n/** @type {?} */\nSwalPartialTargets.prototype.footer;\n}\n\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const /** @type {?} */ SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n/**\n * @param {?=} options\n * @return {?}\n */\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n/**\n * <swal> component. See the README.md for usage.\n * \n * It contains a bunch of \\@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n * \n * /!\\ Some SweetAlert options aren't \\@Inputs but \\@Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still \\@Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n * \n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an \\@Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\nexport class SwalComponent implements OnChanges, OnDestroy {\npublic title: SweetAlertOptions['title'];\npublic titleText: SweetAlertOptions['titleText'];\npublic text: SweetAlertOptions['text'];\npublic html: SweetAlertOptions['html'];\npublic footer: SweetAlertOptions['footer'];\npublic type: SweetAlertOptions['type'];\npublic backdrop: SweetAlertOptions['backdrop'];\npublic toast: SweetAlertOptions['toast'];\npublic target: SweetAlertOptions['target'];\npublic input: SweetAlertOptions['input'];\npublic width: SweetAlertOptions['width'];\npublic padding: SweetAlertOptions['padding'];\npublic background: SweetAlertOptions['background'];\npublic position: SweetAlertOptions['position'];\npublic grow: SweetAlertOptions['grow'];\npublic customClass: SweetAlertOptions['customClass'];\npublic timer: SweetAlertOptions['timer'];\npublic animation: SweetAlertOptions['animation'];\npublic allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\npublic allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\npublic allowEnterKey: SweetAlertOptions['allowEnterKey'];\npublic showConfirmButton: SweetAlertOptions['showConfirmButton'];\npublic showCancelButton: SweetAlertOptions['showCancelButton'];\npublic confirmButtonText: SweetAlertOptions['confirmButtonText'];\npublic cancelButtonText: SweetAlertOptions['cancelButtonText'];\npublic confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\npublic cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\npublic confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\npublic cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\npublic confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\npublic cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\npublic buttonsStyling: SweetAlertOptions['buttonsStyling'];\npublic reverseButtons: SweetAlertOptions['reverseButtons'];\npublic focusConfirm: SweetAlertOptions['focusConfirm'];\npublic focusCancel: SweetAlertOptions['focusCancel'];\npublic showCloseButton: SweetAlertOptions['showCloseButton'];\npublic closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\npublic showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\npublic preConfirm: SweetAlertOptions['preConfirm'];\npublic imageUrl: SweetAlertOptions['imageUrl'];\npublic imageWidth: SweetAlertOptions['imageWidth'];\npublic imageHeight: SweetAlertOptions['imageHeight'];\npublic imageAlt: SweetAlertOptions['imageAlt'];\npublic imageClass: SweetAlertOptions['imageClass'];\npublic inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\npublic inputValue: SweetAlertOptions['inputValue'];\npublic inputOptions: SweetAlertOptions['inputOptions'];\npublic inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\npublic inputAttributes: SweetAlertOptions['inputAttributes'];\npublic inputValidator: SweetAlertOptions['inputValidator'];\npublic inputClass: SweetAlertOptions['inputClass'];\npublic progressSteps: SweetAlertOptions['progressSteps'];\npublic currentProgressStep: SweetAlertOptions['currentProgressStep'];\npublic progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n/**\n * Emits a BeforeOpenEvent when the modal DOM element has been created.\n * Useful to perform DOM mutations before the modal is shown.\n */\npublic readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n/**\n * Emits an OpenEvent when the modal is shown.\n */\npublic readonly open = new EventEmitter<events.OpenEvent>();\n/**\n * Emits a CloseEvent when modal get closed.\n */\npublic readonly close = new EventEmitter<events.CloseEvent>();\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n */\npublic readonly confirm = new EventEmitter<any>();\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n */\npublic readonly cancel = new EventEmitter<any>();\n/**\n * An object of SweetAlert2 native options, useful if:\n *  - you don't want to use the \\@Inputs for practical/philosophical reasons ;\n *  - there are missing \\@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n * \n * /!\\ Be aware that the options defined in this object will override the \\@Inputs of the same name.\n * @param {?} options\n * @return {?}\n */\npublic set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n/**\n * @return {?}\n */\npublic get options(): SweetAlertOptions {\n        const /** @type {?} */ options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = ( /** @type {?} */((this as { [prop: string]: any })))[prop];\n        });\n\n        return options;\n    }\npublic nativeSwal = swal;\nprivate isCurrentlyShown = false;\nprivate readonly touchedProps = new Set<keyof SweetAlertOptions>();\nprivate readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n/**\n * @param {?} defaultSwalOptions\n */\npublic constructor(\nprivate readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    }\n/**\n * Shows the SweetAlert.\n * \n * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n * @return {?}\n */\npublic show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const /** @type {?} */ options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const /** @type {?} */ promise = swal(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        promise.then(\n            result => {\n                // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions\n                if (options.useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions\n                if (options.useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [SwalDefaults, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'titleText': [{ type: Input },],\n'text': [{ type: Input },],\n'html': [{ type: Input },],\n'footer': [{ type: Input },],\n'type': [{ type: Input },],\n'backdrop': [{ type: Input },],\n'toast': [{ type: Input },],\n'target': [{ type: Input },],\n'input': [{ type: Input },],\n'width': [{ type: Input },],\n'padding': [{ type: Input },],\n'background': [{ type: Input },],\n'position': [{ type: Input },],\n'grow': [{ type: Input },],\n'customClass': [{ type: Input },],\n'timer': [{ type: Input },],\n'animation': [{ type: Input },],\n'allowOutsideClick': [{ type: Input },],\n'allowEscapeKey': [{ type: Input },],\n'allowEnterKey': [{ type: Input },],\n'showConfirmButton': [{ type: Input },],\n'showCancelButton': [{ type: Input },],\n'confirmButtonText': [{ type: Input },],\n'cancelButtonText': [{ type: Input },],\n'confirmButtonColor': [{ type: Input },],\n'cancelButtonColor': [{ type: Input },],\n'confirmButtonClass': [{ type: Input },],\n'cancelButtonClass': [{ type: Input },],\n'confirmButtonAriaLabel': [{ type: Input },],\n'cancelButtonAriaLabel': [{ type: Input },],\n'buttonsStyling': [{ type: Input },],\n'reverseButtons': [{ type: Input },],\n'focusConfirm': [{ type: Input },],\n'focusCancel': [{ type: Input },],\n'showCloseButton': [{ type: Input },],\n'closeButtonAriaLabel': [{ type: Input },],\n'showLoaderOnConfirm': [{ type: Input },],\n'preConfirm': [{ type: Input },],\n'imageUrl': [{ type: Input },],\n'imageWidth': [{ type: Input },],\n'imageHeight': [{ type: Input },],\n'imageAlt': [{ type: Input },],\n'imageClass': [{ type: Input },],\n'inputPlaceholder': [{ type: Input },],\n'inputValue': [{ type: Input },],\n'inputOptions': [{ type: Input },],\n'inputAutoTrim': [{ type: Input },],\n'inputAttributes': [{ type: Input },],\n'inputValidator': [{ type: Input },],\n'inputClass': [{ type: Input },],\n'progressSteps': [{ type: Input },],\n'currentProgressStep': [{ type: Input },],\n'progressStepsDistance': [{ type: Input },],\n'beforeOpen': [{ type: Output },],\n'open': [{ type: Output },],\n'close': [{ type: Output },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'options': [{ type: Input },],\n};\n}\n\nfunction SwalComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalComponent.ctorParameters;\n/** @type {?} */\nSwalComponent.propDecorators;\n/** @type {?} */\nSwalComponent.prototype.title;\n/** @type {?} */\nSwalComponent.prototype.titleText;\n/** @type {?} */\nSwalComponent.prototype.text;\n/** @type {?} */\nSwalComponent.prototype.html;\n/** @type {?} */\nSwalComponent.prototype.footer;\n/** @type {?} */\nSwalComponent.prototype.type;\n/** @type {?} */\nSwalComponent.prototype.backdrop;\n/** @type {?} */\nSwalComponent.prototype.toast;\n/** @type {?} */\nSwalComponent.prototype.target;\n/** @type {?} */\nSwalComponent.prototype.input;\n/** @type {?} */\nSwalComponent.prototype.width;\n/** @type {?} */\nSwalComponent.prototype.padding;\n/** @type {?} */\nSwalComponent.prototype.background;\n/** @type {?} */\nSwalComponent.prototype.position;\n/** @type {?} */\nSwalComponent.prototype.grow;\n/** @type {?} */\nSwalComponent.prototype.customClass;\n/** @type {?} */\nSwalComponent.prototype.timer;\n/** @type {?} */\nSwalComponent.prototype.animation;\n/** @type {?} */\nSwalComponent.prototype.allowOutsideClick;\n/** @type {?} */\nSwalComponent.prototype.allowEscapeKey;\n/** @type {?} */\nSwalComponent.prototype.allowEnterKey;\n/** @type {?} */\nSwalComponent.prototype.showConfirmButton;\n/** @type {?} */\nSwalComponent.prototype.showCancelButton;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonText;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonText;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonColor;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonColor;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonClass;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonClass;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.buttonsStyling;\n/** @type {?} */\nSwalComponent.prototype.reverseButtons;\n/** @type {?} */\nSwalComponent.prototype.focusConfirm;\n/** @type {?} */\nSwalComponent.prototype.focusCancel;\n/** @type {?} */\nSwalComponent.prototype.showCloseButton;\n/** @type {?} */\nSwalComponent.prototype.closeButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.showLoaderOnConfirm;\n/** @type {?} */\nSwalComponent.prototype.preConfirm;\n/** @type {?} */\nSwalComponent.prototype.imageUrl;\n/** @type {?} */\nSwalComponent.prototype.imageWidth;\n/** @type {?} */\nSwalComponent.prototype.imageHeight;\n/** @type {?} */\nSwalComponent.prototype.imageAlt;\n/** @type {?} */\nSwalComponent.prototype.imageClass;\n/** @type {?} */\nSwalComponent.prototype.inputPlaceholder;\n/** @type {?} */\nSwalComponent.prototype.inputValue;\n/** @type {?} */\nSwalComponent.prototype.inputOptions;\n/** @type {?} */\nSwalComponent.prototype.inputAutoTrim;\n/** @type {?} */\nSwalComponent.prototype.inputAttributes;\n/** @type {?} */\nSwalComponent.prototype.inputValidator;\n/** @type {?} */\nSwalComponent.prototype.inputClass;\n/** @type {?} */\nSwalComponent.prototype.progressSteps;\n/** @type {?} */\nSwalComponent.prototype.currentProgressStep;\n/** @type {?} */\nSwalComponent.prototype.progressStepsDistance;\n/**\n * Emits a BeforeOpenEvent when the modal DOM element has been created.\n * Useful to perform DOM mutations before the modal is shown.\n * @type {?}\n */\nSwalComponent.prototype.beforeOpen;\n/**\n * Emits an OpenEvent when the modal is shown.\n * @type {?}\n */\nSwalComponent.prototype.open;\n/**\n * Emits a CloseEvent when modal get closed.\n * @type {?}\n */\nSwalComponent.prototype.close;\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n * @type {?}\n */\nSwalComponent.prototype.confirm;\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n * @type {?}\n */\nSwalComponent.prototype.cancel;\n/** @type {?} */\nSwalComponent.prototype.nativeSwal;\n/** @type {?} */\nSwalComponent.prototype.isCurrentlyShown;\n/** @type {?} */\nSwalComponent.prototype.touchedProps;\n/** @type {?} */\nSwalComponent.prototype.markTouched;\n/** @type {?} */\nSwalComponent.prototype.defaultSwalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { SweetAlertOptions, SweetAlertType } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\nexport type SimpleSweetAlertOptions = [string, string, SweetAlertType | null];\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n * \n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n * \n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n * \n * 2) A native SweetAlert2 options object, ex:\n * \n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n * \n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n * \n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nexport class SwalDirective implements OnInit, OnDestroy {\n/**\n * SweetAlert2 options or a SwalComponent instance.\n * See the class doc block for more informations.\n * @param {?} swal\n * @return {?}\n */\npublic set swal(swal: SwalComponent | SweetAlertOptions | SimpleSweetAlertOptions) {\n        if (swal instanceof SwalComponent) {\n            this.swalInstance = swal;\n        } else if (Array.isArray(swal)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.type] = swal;\n        } else {\n            this.swalOptions = swal;\n        }\n    }\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n */\npublic readonly confirm = new EventEmitter<any>();\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n */\npublic readonly cancel = new EventEmitter<any>();\n/**\n * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n * options to it.\n * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n */\nprivate swalRef: ComponentRef<SwalComponent>;\n/**\n * An instance of the <swal> component that this directive controls.\n * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n */\nprivate swalInstance: SwalComponent;\n/**\n * Holds the native SweetAlert2 options.\n * Empty when the user passed an existing SwalComponent instance.\n */\nprivate swalOptions: SweetAlertOptions;\n/**\n * @param {?} viewContainerRef\n * @param {?} resolver\n */\npublic constructor(\nprivate readonly viewContainerRef: ViewContainerRef,\nprivate readonly resolver: ComponentFactoryResolver) {\n    }\n/**\n * OnInit lifecycle handler.\n * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n * (cancel) outputs to reemit on the directive.\n * @return {?}\n */\npublic ngOnInit(): void {\n        if (!this.swalInstance) {\n            const /** @type {?} */ factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n/**\n * OnDestroy lifecycle handler.\n * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n/**\n * Click handler.\n * The directive listens for onclick events on its host element.\n * When this happens, it shows the <swal> attached to this directive.\n * @param {?} event\n * @return {?}\n */\npublic onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const /** @type {?} */ confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const /** @type {?} */ cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n/**\n * @return {?}\n */\nfunction unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[swal]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'swal': [{ type: Input },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'onHostClicked': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction SwalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalDirective.ctorParameters;\n/** @type {?} */\nSwalDirective.propDecorators;\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n * @type {?}\n */\nSwalDirective.prototype.confirm;\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n * @type {?}\n */\nSwalDirective.prototype.cancel;\n/**\n * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n * options to it.\n * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n * @type {?}\n */\nSwalDirective.prototype.swalRef;\n/**\n * An instance of the <swal> component that this directive controls.\n * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n * @type {?}\n */\nSwalDirective.prototype.swalInstance;\n/**\n * Holds the native SweetAlert2 options.\n * Empty when the user passed an existing SwalComponent instance.\n * @type {?}\n */\nSwalDirective.prototype.swalOptions;\n/** @type {?} */\nSwalDirective.prototype.viewContainerRef;\n/** @type {?} */\nSwalDirective.prototype.resolver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n/**\n * \\@internal \n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\nexport class SwalPartialComponent {\npublic template: TemplateRef<any>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: Input },],\n};\n}\n\nfunction SwalPartialComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalPartialComponent.ctorParameters;\n/** @type {?} */\nSwalPartialComponent.propDecorators;\n/** @type {?} */\nSwalPartialComponent.prototype.template;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n * \n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n * \n *     \\@Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n * \n * Usage in the template:\n * \n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n * \n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n/**\n * Takes a \"partial target\" or nothing (will target main content zone by default).\n * \n * See the {\\@link SwalPartialTargets} service to see the available targets.\n * See the class doc block for more informations.\n */\npublic swalPartial: () => HTMLElement;\n/**\n * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n */\nprivate partialRef: ComponentRef<SwalPartialComponent>;\nprivate beforeOpenSubscription: Subscription;\nprivate closeSubscription: Subscription;\n/**\n * @param {?} resolver\n * @param {?} injector\n * @param {?} app\n * @param {?} templateRef\n * @param {?} swalTargets\n * @param {?} swalComponent\n */\nconstructor(\nprivate readonly resolver: ComponentFactoryResolver,\nprivate readonly injector: Injector,\nprivate readonly app: ApplicationRef,\nprivate readonly templateRef: TemplateRef<any>,\nprivate readonly swalTargets: SwalPartialTargets,\nprivate readonly swalComponent: SwalComponent) {\n    }\n/**\n * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n * receive the consumer's template.\n * @return {?}\n */\npublic ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const /** @type {?} */ targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const /** @type {?} */ factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n/**\n * Unsubscribes from the Sweet Alert appearance/disappearance.\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[swalPartial]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n{type: ApplicationRef, },\n{type: TemplateRef, },\n{type: SwalPartialTargets, },\n{type: SwalComponent, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'swalPartial': [{ type: Input },],\n};\n}\n\nfunction SwalPartialDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalPartialDirective.ctorParameters;\n/** @type {?} */\nSwalPartialDirective.propDecorators;\n/**\n * Takes a \"partial target\" or nothing (will target main content zone by default).\n * \n * See the {\\@link SwalPartialTargets} service to see the available targets.\n * See the class doc block for more informations.\n * @type {?}\n */\nSwalPartialDirective.prototype.swalPartial;\n/**\n * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n * @type {?}\n */\nSwalPartialDirective.prototype.partialRef;\n/** @type {?} */\nSwalPartialDirective.prototype.beforeOpenSubscription;\n/** @type {?} */\nSwalPartialDirective.prototype.closeSubscription;\n/** @type {?} */\nSwalPartialDirective.prototype.resolver;\n/** @type {?} */\nSwalPartialDirective.prototype.injector;\n/** @type {?} */\nSwalPartialDirective.prototype.app;\n/** @type {?} */\nSwalPartialDirective.prototype.templateRef;\n/** @type {?} */\nSwalPartialDirective.prototype.swalTargets;\n/** @type {?} */\nSwalPartialDirective.prototype.swalComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nexport class SweetAlert2Module {\n/**\n * @param {?=} defaultSwalOptions\n * @return {?}\n */\npublic static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SweetAlert2Module_tsickle_Closure_declarations() {\n/** @type {?} */\nSweetAlert2Module.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSweetAlert2Module.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["SwalPartialTargets","this","title","swal","getTitle","content","getContent","buttonsWrapper","getButtonsWrapper","actions","getActions","confirmButton","getConfirmButton","cancelButton","getCancelButton","footer","getFooter","SwalDefaults","InjectionToken","swalDefaultsProvider","options","provide","useValue","SwalComponent","defaultSwalOptions","beforeOpen","EventEmitter","open","close","confirm","cancel","nativeSwal","isCurrentlyShown","touchedProps","Set","markTouched","add","bind","show","Object","defineProperty","prototype","get","_this","forEach","prop","set","assign","keys","ngOnChanges","changes","filter","ngOnDestroy","onBeforeOpen","modalElement","emit","onOpen","onClose","promise","then","result","useRejections","value","dismiss","err","decorators","type","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","undefined","Inject","propDecorators","Input","titleText","text","html","backdrop","toast","target","input","width","padding","background","position","grow","customClass","timer","animation","allowOutsideClick","allowEscapeKey","allowEnterKey","showConfirmButton","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","confirmButtonClass","cancelButtonClass","confirmButtonAriaLabel","cancelButtonAriaLabel","buttonsStyling","reverseButtons","focusConfirm","focusCancel","showCloseButton","closeButtonAriaLabel","showLoaderOnConfirm","preConfirm","imageUrl","imageWidth","imageHeight","imageAlt","imageClass","inputPlaceholder","inputValue","inputOptions","inputAutoTrim","inputAttributes","inputValidator","inputClass","progressSteps","currentProgressStep","progressStepsDistance","Output","SwalDirective","viewContainerRef","resolver","swalInstance","Array","isArray","swalOptions","swal$$1","ngOnInit","factory","resolveComponentFactory","swalRef","createComponent","instance","destroy","onHostClicked","event","preventDefault","stopImmediatePropagation","stopPropagation","confirmSub","asObservable","subscribe","v","cancelSub","unsubscribe","Directive","ViewContainerRef","ComponentFactoryResolver","HostListener","SwalPartialComponent","SwalPartialDirective","injector","app","templateRef","swalTargets","swalComponent","beforeOpenSubscription","targetEl","swalPartial","partialRef","create","attachView","hostView","closeSubscription","detachView","Injector","ApplicationRef","TemplateRef","Host","SweetAlert2Module","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"mZAMA,IAAAA,EAAA,WAWA,OAXA,WAEoBC,KAApBC,MAA4B,WAAM,OAAAC,EAAKC,YAEnBH,KAApBI,QAA8B,WAAM,OAAAF,EAAKG,cAKpCL,KAALM,eAAK,WAAA,OAAAJ,EAAAK,qBAEeP,KAApBQ,QAA8B,WAAM,OAAAN,EAAKO,cAErBT,KAApBU,cAAoC,WAAM,OAAAR,EAAKS,oBAE3BX,KAApBY,aAAmC,WAAM,OAAAV,EAAKW,mBAE1Bb,KAApBc,OAA6B,WAAM,OAAAZ,EAAKa,cAjBxC,GCHaC,EAAe,IAAIC,EAAAA,eAAiC,gBAKjE,SAAAC,EAHCC,GAIG,YAJJ,IAAAA,IAACA,OAKOC,QAHSJ,EAITK,SAHUF,GCalB,IAAAG,EAAA,WA6HA,SAAAA,EAQyCC,GAAAvB,KAAzCuB,mBAAyCA,EArEnCvB,KAANwB,WAAM,IAAAC,EAAAA,aAKAzB,KAAN0B,KAAM,IAAAD,EAAAA,aAKAzB,KAAN2B,MAAM,IAAAF,EAAAA,aAWAzB,KAAN4B,QAAM,IAAAH,EAAAA,aAaAzB,KAAN6B,OAAM,IAAAJ,EAAAA,aA2BKzB,KAAX8B,WAAwB5B,EAEZF,KAAZ+B,kBAA+B,EAEV/B,KAArBgC,aAAoC,IAAIC,IAEnBjC,KAArBkC,YAAmClC,KAAKgC,aAAaG,IAAIC,KAAKpC,KAAKgC,cAF3DhC,KAAKqC,KAAOrC,KAAKqC,KAAKD,KAAKpC,aA9BnCsC,OAAAC,eAQMjB,EARNkB,UAAA,WAOAC,IAAA,WAAA,IAAAC,EAAA1C,KAOcmB,KAGN,OAJAnB,KAMKgC,aAAaW,QAAQ,SAAAC,GALtBzB,EAMQyB,GAAQ,EAAkCA,KAG/CzB,GAvBf0B,IAAA,SAQM1B,GAPEmB,OAQOQ,OAAO9C,KAAMmB,GAPpBmB,OAQOS,KAAK5B,GAASwB,QAAQ3C,KAAKkC,8CA8BrCZ,EAALkB,UAAAQ,YAAK,SAAAC,GAHGX,OAIOS,KAAKE,GAHPC,OAIO,SAAAN,GAAQ,MAAS,YAATA,IAHfD,QAIQ3C,KAAKkC,cAGrBZ,EAALkB,UAAAW,YAAK,WADOnD,KAEK+B,kBADL7B,EAEKyB,SAUZL,EAALkB,UAAAH,KAAK,WAAA,IAALK,EAAA1C,KAEcmB,EAFdmB,OAAAQ,UAEe9C,KAEKuB,mBACLvB,KAEKmB,SACRiC,aAEc,SAAAC,GADVX,EAEKlB,WAAW8B,MAAOD,aAFvCA,KAGYE,OAEQ,SAAAF,GADJX,EAEKX,kBAAmB,EADxBW,EAEKhB,KAAK4B,MAAOD,aAFjCA,KAGYG,QAES,SAAAH,GADLX,EAEKX,kBAAmB,EADxBW,EAEKf,MAAM2B,MAAOD,aAFlCA,OAOcI,EAAUvD,EAAKiB,GAqBrB,OApBAsC,EAEQC,KADJ,SAAAC,GAEQxC,EAEQyC,cADRlB,EAEKd,QAAQ0B,KAAKK,GACf,UAAeA,EADlBjB,EAEKd,QAAQ0B,KAAKK,EAAOE,OAAzBnB,EAEKb,OAAOyB,KAAKK,EAAOG,UAChC,SAAAC,GAEQ5C,EAEQyC,eADRlB,EAEKb,OAAOyB,KAAKS,KAMtBN,KA9Mf,GAgNOnC,EAAP0C,aACEC,KAAMC,EAAAA,UAAWC,OADfC,SAEU,OADVC,SAEU,GADVC,gBAEiBC,EAAAA,wBAAwBC,WAI5ClD,EAADmD,eAAC,WAAA,QACAR,KAAMS,UAAWV,aAAeC,KAAMU,EAAAA,OAAQR,MAAOnD,QAE/CM,EAAPsD,gBACA3E,QAAYgE,KAAMY,EAAAA,QAClBC,YAAgBb,KAAMY,EAAAA,QACtBE,OAAWd,KAAMY,EAAAA,QACjBG,OAAWf,KAAMY,EAAAA,QACjB/D,SAAamD,KAAMY,EAAAA,QACnBZ,OAAWA,KAAMY,EAAAA,QACjBI,WAAehB,KAAMY,EAAAA,QACrBK,QAAYjB,KAAMY,EAAAA,QAClBM,SAAalB,KAAMY,EAAAA,QACnBO,QAAYnB,KAAMY,EAAAA,QAClBQ,QAAYpB,KAAMY,EAAAA,QAClBS,UAAcrB,KAAMY,EAAAA,QACpBU,aAAiBtB,KAAMY,EAAAA,QACvBW,WAAevB,KAAMY,EAAAA,QACrBY,OAAWxB,KAAMY,EAAAA,QACjBa,cAAkBzB,KAAMY,EAAAA,QACxBc,QAAY1B,KAAMY,EAAAA,QAClBe,YAAgB3B,KAAMY,EAAAA,QACtBgB,oBAAwB5B,KAAMY,EAAAA,QAC9BiB,iBAAqB7B,KAAMY,EAAAA,QAC3BkB,gBAAoB9B,KAAMY,EAAAA,QAC1BmB,oBAAwB/B,KAAMY,EAAAA,QAC9BoB,mBAAuBhC,KAAMY,EAAAA,QAC7BqB,oBAAwBjC,KAAMY,EAAAA,QAC9BsB,mBAAuBlC,KAAMY,EAAAA,QAC7BuB,qBAAyBnC,KAAMY,EAAAA,QAC/BwB,oBAAwBpC,KAAMY,EAAAA,QAC9ByB,qBAAyBrC,KAAMY,EAAAA,QAC/B0B,oBAAwBtC,KAAMY,EAAAA,QAC9B2B,yBAA6BvC,KAAMY,EAAAA,QACnC4B,wBAA4BxC,KAAMY,EAAAA,QAClC6B,iBAAqBzC,KAAMY,EAAAA,QAC3B8B,iBAAqB1C,KAAMY,EAAAA,QAC3B+B,eAAmB3C,KAAMY,EAAAA,QACzBgC,cAAkB5C,KAAMY,EAAAA,QACxBiC,kBAAsB7C,KAAMY,EAAAA,QAC5BkC,uBAA2B9C,KAAMY,EAAAA,QACjCmC,sBAA0B/C,KAAMY,EAAAA,QAChCoC,aAAiBhD,KAAMY,EAAAA,QACvBqC,WAAejD,KAAMY,EAAAA,QACrBsC,aAAiBlD,KAAMY,EAAAA,QACvBuC,cAAkBnD,KAAMY,EAAAA,QACxBwC,WAAepD,KAAMY,EAAAA,QACrByC,aAAiBrD,KAAMY,EAAAA,QACvB0C,mBAAuBtD,KAAMY,EAAAA,QAC7B2C,aAAiBvD,KAAMY,EAAAA,QACvB4C,eAAmBxD,KAAMY,EAAAA,QACzB6C,gBAAoBzD,KAAMY,EAAAA,QAC1B8C,kBAAsB1D,KAAMY,EAAAA,QAC5B+C,iBAAqB3D,KAAMY,EAAAA,QAC3BgD,aAAiB5D,KAAMY,EAAAA,QACvBiD,gBAAoB7D,KAAMY,EAAAA,QAC1BkD,sBAA0B9D,KAAMY,EAAAA,QAChCmD,wBAA4B/D,KAAMY,EAAAA,QAClCrD,aAAiByC,KAAMgE,EAAAA,SACvBvG,OAAWuC,KAAMgE,EAAAA,SACjBtG,QAAYsC,KAAMgE,EAAAA,SAClBrG,UAAcqC,KAAMgE,EAAAA,SACpBpG,SAAaoC,KAAMgE,EAAAA,SACnB9G,UAAc8C,KAAMY,EAAAA,SCpRpB,IAAAqD,EAAA,WA2DA,SAAAA,EAGyBC,EACAC,GADApI,KAAzBmI,iBAAyBA,EACAnI,KAAzBoI,SAAyBA,EApCnBpI,KAAN4B,QAAM,IAAAH,EAAAA,aAaAzB,KAAN6B,OAAM,IAAAJ,EAAAA,oBAjCNa,OAAAC,eAAM2F,EAAN1F,UAAA,QAAAK,IAAA,SAAM3C,GACMA,aAAgBoB,EAChBtB,KAAKqI,aAAenI,EACjBoI,MAAUC,QAAQrI,IACrBF,KAAKwI,eACJxI,KAAbwI,YAAAvI,MAAAwI,EAAA,GAAqCzI,KAArCwI,YAAAzD,KAAA0D,EAAA,GAA4DzI,KAA5DwI,YAAAvE,KAAAwE,EAAA,IAEYzI,KAAKwI,YAActI,mCAyD1BgI,EAAL1F,UAAAkG,SAAK,WADG,IAEK1I,KAAKqI,aAAc,CADpB,IAEMM,EAAU3I,KAAKoI,SAASQ,wBAAwBtH,GAAtDtB,KAEK6I,QAAU7I,KAAKmI,iBAAiBW,gBAAgBH,GADrD3I,KAEKqI,aAAerI,KAAK6I,QAAQE,WAQxCb,EAAL1F,UAAAW,YAAK,WADOnD,KAEK6I,SADL7I,KAEK6I,QAAQG,WAUpBd,EAAL1F,UAAAyG,cAAK,SAAAC,GAAA,IAALxG,EAAA1C,KADQkJ,EAEMC,iBADND,EAEME,2BADNF,EAEMG,kBAAFrJ,KAEKwI,cADLxI,KAEKqI,aAAalH,QAAUnB,KAAKwI,aACrC,IAEMc,EAAatJ,KAAKqI,aAAazG,QAAQ2H,eAAeC,UAAU,SAAAC,GAAK,OAAA/G,EAAKd,QAAQ0B,KAAKmG,KACvFC,EAAY1J,KAAKqI,aAAaxG,OAAO0H,eAAeC,UAAU,SAAAC,GAAK,OAAA/G,EAAKb,OAAOyB,KAAKmG,KAA1FzJ,KAEKqI,aAAahG,OAAOqB,KAEjC,WACY4F,EAAWK,cACXD,EAAUC,mBAhHtB,GAmHOzB,EAAPlE,aACEC,KAAM2F,EAAAA,UAAWzF,OACfC,SAAU,aAIb8D,EAADzD,eAAC,WAAA,QAGAR,KAAM4F,EAAAA,mBACN5F,KAAM6F,EAAAA,4BAAA5B,EAAPtD,gBAGA1E,OAFW+D,KAAMY,EAAAA,QAGjBjD,UAFcqC,KAAMgE,EAAAA,SAGpBpG,SAFaoC,KAAMgE,EAAAA,SAGnBgB,gBAFoBhF,KAAM8F,EAAAA,aAAc5F,MAAM,SAAU,cCnJxD,IAAA6F,EAAA,kBAAA,aAAA,GAIOA,EAAPhG,aACEC,KAAMC,EAAAA,UAAWC,OADfE,SAEU,6DADVC,gBAEiBC,EAAAA,wBAAwBC,WAI5CwF,EAADvF,eAAC,WAAA,UAEMuF,EAAPpF,gBACAP,WAAeJ,KAAMY,EAAAA,SCiBrB,IAAAoF,EAAA,WAsBA,SAAAA,EAFyB7B,EACA8B,EACAC,EACAC,EACAC,EACCC,GALDtK,KAAzBoI,SAAyBA,EACApI,KAAzBkK,SAAyBA,EACAlK,KAAzBmK,IAAyBA,EACAnK,KAAzBoK,YAAyBA,EACApK,KAAzBqK,YAAyBA,EACCrK,KAA1BsK,cAA0BA,SAOrBL,EAALzH,UAAAkG,SAAK,WAAA,IAALhG,EAAA1C,KAIQA,KAHKuK,uBAAyBvK,KAAKsK,cAAc9I,WAAW+H,eAAeC,UAAU,WAKjF,IAHMgB,EAAW9H,EAAK+H,YAAc/H,EAAK+H,cAAgB/H,EAAK2H,YAAYjK,UACpEuI,EAAUjG,EAAK0F,SAASQ,wBAAwBoB,GAKtDtH,EAHKgI,WAAa/B,EAAQgC,OAAOjI,EAAKwH,YAAcM,GAMpD9H,EAHKgI,WAAW3B,SAAS1E,SAAW3B,EAAK0H,YAMzC1H,EAHKyH,IAAIS,WAAWlI,EAAKgI,WAAWG,YAMxC7K,KAHK8K,kBAAoB9K,KAAKsK,cAAc3I,MAAM4H,eAAeC,UAAU,WAKvE9G,EAHKyH,IAAIY,WAAWrI,EAAKgI,WAAWG,UAIpCnI,EAHKgI,WAAW1B,aAOvBiB,EAALzH,UAAAW,YAAK,WAIGnD,KAHKuK,uBAAuBZ,cAI5B3J,KAHK8K,kBAAkBnB,iBA3D/B,GA6DOM,EAAPjG,aACEC,KAAM2F,EAAAA,UAAWzF,OAIfC,SAHU,oBAIb6F,EAADxF,eAAC,WAAA,QAMAR,KAAM6F,EAAAA,2BACN7F,KAAM+G,EAAAA,WACN/G,KAAMgH,EAAAA,iBACNhH,KAAMiH,EAAAA,cACNjH,KAAMlE,IACNkE,KAfC3C,EAAA0C,aAAAC,KAAAkH,EAAAA,UAYKlB,EAAPrF,gBAMA6F,cALkBxG,KAAMY,EAAAA,SCxGxB,IAAAuG,EAAA,WAAA,SAAAA,YAGKA,EAALC,QAAK,SAAA9J,GAGG,OACI+J,SAFUF,EAGVG,WAFWrK,EAAsBK,QAN7C,GASO6J,EAAPpH,aACEC,KAAMuH,EAAAA,SAAUrH,OAGdsH,cACInK,EAFe2I,EAAsBD,EAGrC9B,GAEJqD,WACIxL,GAEJ2L,SACIC,EAAAA,cAEJC,SACItK,EAFe2I,EAGf/B,GAEJ2D,iBACIvK,EAFe0I,OAKtBoB,EAAD3G,eAAC,WAAA"}

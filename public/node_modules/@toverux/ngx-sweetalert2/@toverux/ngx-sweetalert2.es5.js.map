{"version":3,"file":"ngx-sweetalert2.es5.js","sources":["~/@toverux/ngx-sweetalert2/ngx-sweetalert2.ts","~/@toverux/ngx-sweetalert2/sweetalert2.module.ts","~/@toverux/ngx-sweetalert2/swal-partial.directive.ts","~/@toverux/ngx-sweetalert2/swal-partial.component.ts","~/@toverux/ngx-sweetalert2/swal.directive.ts","~/@toverux/ngx-sweetalert2/swal.component.ts","~/@toverux/ngx-sweetalert2/di.ts","~/@toverux/ngx-sweetalert2/swal-partial-targets.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SwalPartialTargets,SwalComponent,SwalDirective,SwalPartialDirective,SweetAlert2Module,BeforeOpenEvent,OpenEvent,CloseEvent} from './public_api';\n\nexport {SwalDefaults as ɵa,swalDefaultsProvider as ɵb} from './di';\nexport {SwalPartialComponent as ɵc} from './swal-partial.component';","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nexport class SweetAlert2Module {\n/**\n * @param {?=} defaultSwalOptions\n * @return {?}\n */\npublic static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SweetAlert2Module_tsickle_Closure_declarations() {\n/** @type {?} */\nSweetAlert2Module.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSweetAlert2Module.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n * \n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n * \n *     \\@Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n * \n * Usage in the template:\n * \n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n * \n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n/**\n * Takes a \"partial target\" or nothing (will target main content zone by default).\n * \n * See the {\\@link SwalPartialTargets} service to see the available targets.\n * See the class doc block for more informations.\n */\npublic swalPartial: () => HTMLElement;\n/**\n * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n */\nprivate partialRef: ComponentRef<SwalPartialComponent>;\nprivate beforeOpenSubscription: Subscription;\nprivate closeSubscription: Subscription;\n/**\n * @param {?} resolver\n * @param {?} injector\n * @param {?} app\n * @param {?} templateRef\n * @param {?} swalTargets\n * @param {?} swalComponent\n */\nconstructor(\nprivate readonly resolver: ComponentFactoryResolver,\nprivate readonly injector: Injector,\nprivate readonly app: ApplicationRef,\nprivate readonly templateRef: TemplateRef<any>,\nprivate readonly swalTargets: SwalPartialTargets,\nprivate readonly swalComponent: SwalComponent) {\n    }\n/**\n * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n * receive the consumer's template.\n * @return {?}\n */\npublic ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const /** @type {?} */ targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const /** @type {?} */ factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n/**\n * Unsubscribes from the Sweet Alert appearance/disappearance.\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[swalPartial]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n{type: ApplicationRef, },\n{type: TemplateRef, },\n{type: SwalPartialTargets, },\n{type: SwalComponent, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'swalPartial': [{ type: Input },],\n};\n}\n\nfunction SwalPartialDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalPartialDirective.ctorParameters;\n/** @type {?} */\nSwalPartialDirective.propDecorators;\n/**\n * Takes a \"partial target\" or nothing (will target main content zone by default).\n * \n * See the {\\@link SwalPartialTargets} service to see the available targets.\n * See the class doc block for more informations.\n * @type {?}\n */\nSwalPartialDirective.prototype.swalPartial;\n/**\n * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n * @type {?}\n */\nSwalPartialDirective.prototype.partialRef;\n/** @type {?} */\nSwalPartialDirective.prototype.beforeOpenSubscription;\n/** @type {?} */\nSwalPartialDirective.prototype.closeSubscription;\n/** @type {?} */\nSwalPartialDirective.prototype.resolver;\n/** @type {?} */\nSwalPartialDirective.prototype.injector;\n/** @type {?} */\nSwalPartialDirective.prototype.app;\n/** @type {?} */\nSwalPartialDirective.prototype.templateRef;\n/** @type {?} */\nSwalPartialDirective.prototype.swalTargets;\n/** @type {?} */\nSwalPartialDirective.prototype.swalComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n/**\n * \\@internal \n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\nexport class SwalPartialComponent {\npublic template: TemplateRef<any>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: Input },],\n};\n}\n\nfunction SwalPartialComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalPartialComponent.ctorParameters;\n/** @type {?} */\nSwalPartialComponent.propDecorators;\n/** @type {?} */\nSwalPartialComponent.prototype.template;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { SweetAlertOptions, SweetAlertType } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\nexport type SimpleSweetAlertOptions = [string, string, SweetAlertType | null];\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n * \n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n * \n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n * \n * 2) A native SweetAlert2 options object, ex:\n * \n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n * \n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n * \n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nexport class SwalDirective implements OnInit, OnDestroy {\n/**\n * SweetAlert2 options or a SwalComponent instance.\n * See the class doc block for more informations.\n * @param {?} swal\n * @return {?}\n */\npublic set swal(swal: SwalComponent | SweetAlertOptions | SimpleSweetAlertOptions) {\n        if (swal instanceof SwalComponent) {\n            this.swalInstance = swal;\n        } else if (Array.isArray(swal)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.type] = swal;\n        } else {\n            this.swalOptions = swal;\n        }\n    }\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n */\npublic readonly confirm = new EventEmitter<any>();\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n */\npublic readonly cancel = new EventEmitter<any>();\n/**\n * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n * options to it.\n * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n */\nprivate swalRef: ComponentRef<SwalComponent>;\n/**\n * An instance of the <swal> component that this directive controls.\n * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n */\nprivate swalInstance: SwalComponent;\n/**\n * Holds the native SweetAlert2 options.\n * Empty when the user passed an existing SwalComponent instance.\n */\nprivate swalOptions: SweetAlertOptions;\n/**\n * @param {?} viewContainerRef\n * @param {?} resolver\n */\npublic constructor(\nprivate readonly viewContainerRef: ViewContainerRef,\nprivate readonly resolver: ComponentFactoryResolver) {\n    }\n/**\n * OnInit lifecycle handler.\n * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n * (cancel) outputs to reemit on the directive.\n * @return {?}\n */\npublic ngOnInit(): void {\n        if (!this.swalInstance) {\n            const /** @type {?} */ factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n/**\n * OnDestroy lifecycle handler.\n * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n/**\n * Click handler.\n * The directive listens for onclick events on its host element.\n * When this happens, it shows the <swal> attached to this directive.\n * @param {?} event\n * @return {?}\n */\npublic onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const /** @type {?} */ confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const /** @type {?} */ cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n/**\n * @return {?}\n */\nfunction unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[swal]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'swal': [{ type: Input },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'onHostClicked': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction SwalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalDirective.ctorParameters;\n/** @type {?} */\nSwalDirective.propDecorators;\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n * @type {?}\n */\nSwalDirective.prototype.confirm;\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n * @type {?}\n */\nSwalDirective.prototype.cancel;\n/**\n * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n * options to it.\n * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n * @type {?}\n */\nSwalDirective.prototype.swalRef;\n/**\n * An instance of the <swal> component that this directive controls.\n * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n * @type {?}\n */\nSwalDirective.prototype.swalInstance;\n/**\n * Holds the native SweetAlert2 options.\n * Empty when the user passed an existing SwalComponent instance.\n * @type {?}\n */\nSwalDirective.prototype.swalOptions;\n/** @type {?} */\nSwalDirective.prototype.viewContainerRef;\n/** @type {?} */\nSwalDirective.prototype.resolver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n/**\n * <swal> component. See the README.md for usage.\n * \n * It contains a bunch of \\@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n * \n * /!\\ Some SweetAlert options aren't \\@Inputs but \\@Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still \\@Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n * \n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an \\@Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\nexport class SwalComponent implements OnChanges, OnDestroy {\npublic title: SweetAlertOptions['title'];\npublic titleText: SweetAlertOptions['titleText'];\npublic text: SweetAlertOptions['text'];\npublic html: SweetAlertOptions['html'];\npublic footer: SweetAlertOptions['footer'];\npublic type: SweetAlertOptions['type'];\npublic backdrop: SweetAlertOptions['backdrop'];\npublic toast: SweetAlertOptions['toast'];\npublic target: SweetAlertOptions['target'];\npublic input: SweetAlertOptions['input'];\npublic width: SweetAlertOptions['width'];\npublic padding: SweetAlertOptions['padding'];\npublic background: SweetAlertOptions['background'];\npublic position: SweetAlertOptions['position'];\npublic grow: SweetAlertOptions['grow'];\npublic customClass: SweetAlertOptions['customClass'];\npublic timer: SweetAlertOptions['timer'];\npublic animation: SweetAlertOptions['animation'];\npublic allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\npublic allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\npublic allowEnterKey: SweetAlertOptions['allowEnterKey'];\npublic showConfirmButton: SweetAlertOptions['showConfirmButton'];\npublic showCancelButton: SweetAlertOptions['showCancelButton'];\npublic confirmButtonText: SweetAlertOptions['confirmButtonText'];\npublic cancelButtonText: SweetAlertOptions['cancelButtonText'];\npublic confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\npublic cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\npublic confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\npublic cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\npublic confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\npublic cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\npublic buttonsStyling: SweetAlertOptions['buttonsStyling'];\npublic reverseButtons: SweetAlertOptions['reverseButtons'];\npublic focusConfirm: SweetAlertOptions['focusConfirm'];\npublic focusCancel: SweetAlertOptions['focusCancel'];\npublic showCloseButton: SweetAlertOptions['showCloseButton'];\npublic closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\npublic showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\npublic preConfirm: SweetAlertOptions['preConfirm'];\npublic imageUrl: SweetAlertOptions['imageUrl'];\npublic imageWidth: SweetAlertOptions['imageWidth'];\npublic imageHeight: SweetAlertOptions['imageHeight'];\npublic imageAlt: SweetAlertOptions['imageAlt'];\npublic imageClass: SweetAlertOptions['imageClass'];\npublic inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\npublic inputValue: SweetAlertOptions['inputValue'];\npublic inputOptions: SweetAlertOptions['inputOptions'];\npublic inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\npublic inputAttributes: SweetAlertOptions['inputAttributes'];\npublic inputValidator: SweetAlertOptions['inputValidator'];\npublic inputClass: SweetAlertOptions['inputClass'];\npublic progressSteps: SweetAlertOptions['progressSteps'];\npublic currentProgressStep: SweetAlertOptions['currentProgressStep'];\npublic progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n/**\n * Emits a BeforeOpenEvent when the modal DOM element has been created.\n * Useful to perform DOM mutations before the modal is shown.\n */\npublic readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n/**\n * Emits an OpenEvent when the modal is shown.\n */\npublic readonly open = new EventEmitter<events.OpenEvent>();\n/**\n * Emits a CloseEvent when modal get closed.\n */\npublic readonly close = new EventEmitter<events.CloseEvent>();\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n */\npublic readonly confirm = new EventEmitter<any>();\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n */\npublic readonly cancel = new EventEmitter<any>();\n/**\n * An object of SweetAlert2 native options, useful if:\n *  - you don't want to use the \\@Inputs for practical/philosophical reasons ;\n *  - there are missing \\@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n * \n * /!\\ Be aware that the options defined in this object will override the \\@Inputs of the same name.\n * @param {?} options\n * @return {?}\n */\npublic set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n/**\n * @return {?}\n */\npublic get options(): SweetAlertOptions {\n        const /** @type {?} */ options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = ( /** @type {?} */((this as { [prop: string]: any })))[prop];\n        });\n\n        return options;\n    }\npublic nativeSwal = swal;\nprivate isCurrentlyShown = false;\nprivate readonly touchedProps = new Set<keyof SweetAlertOptions>();\nprivate readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n/**\n * @param {?} defaultSwalOptions\n */\npublic constructor(\nprivate readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    }\n/**\n * Shows the SweetAlert.\n * \n * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n * @return {?}\n */\npublic show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const /** @type {?} */ options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const /** @type {?} */ promise = swal(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        promise.then(\n            result => {\n                // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions\n                if (options.useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions\n                if (options.useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [SwalDefaults, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'titleText': [{ type: Input },],\n'text': [{ type: Input },],\n'html': [{ type: Input },],\n'footer': [{ type: Input },],\n'type': [{ type: Input },],\n'backdrop': [{ type: Input },],\n'toast': [{ type: Input },],\n'target': [{ type: Input },],\n'input': [{ type: Input },],\n'width': [{ type: Input },],\n'padding': [{ type: Input },],\n'background': [{ type: Input },],\n'position': [{ type: Input },],\n'grow': [{ type: Input },],\n'customClass': [{ type: Input },],\n'timer': [{ type: Input },],\n'animation': [{ type: Input },],\n'allowOutsideClick': [{ type: Input },],\n'allowEscapeKey': [{ type: Input },],\n'allowEnterKey': [{ type: Input },],\n'showConfirmButton': [{ type: Input },],\n'showCancelButton': [{ type: Input },],\n'confirmButtonText': [{ type: Input },],\n'cancelButtonText': [{ type: Input },],\n'confirmButtonColor': [{ type: Input },],\n'cancelButtonColor': [{ type: Input },],\n'confirmButtonClass': [{ type: Input },],\n'cancelButtonClass': [{ type: Input },],\n'confirmButtonAriaLabel': [{ type: Input },],\n'cancelButtonAriaLabel': [{ type: Input },],\n'buttonsStyling': [{ type: Input },],\n'reverseButtons': [{ type: Input },],\n'focusConfirm': [{ type: Input },],\n'focusCancel': [{ type: Input },],\n'showCloseButton': [{ type: Input },],\n'closeButtonAriaLabel': [{ type: Input },],\n'showLoaderOnConfirm': [{ type: Input },],\n'preConfirm': [{ type: Input },],\n'imageUrl': [{ type: Input },],\n'imageWidth': [{ type: Input },],\n'imageHeight': [{ type: Input },],\n'imageAlt': [{ type: Input },],\n'imageClass': [{ type: Input },],\n'inputPlaceholder': [{ type: Input },],\n'inputValue': [{ type: Input },],\n'inputOptions': [{ type: Input },],\n'inputAutoTrim': [{ type: Input },],\n'inputAttributes': [{ type: Input },],\n'inputValidator': [{ type: Input },],\n'inputClass': [{ type: Input },],\n'progressSteps': [{ type: Input },],\n'currentProgressStep': [{ type: Input },],\n'progressStepsDistance': [{ type: Input },],\n'beforeOpen': [{ type: Output },],\n'open': [{ type: Output },],\n'close': [{ type: Output },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'options': [{ type: Input },],\n};\n}\n\nfunction SwalComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwalComponent.ctorParameters;\n/** @type {?} */\nSwalComponent.propDecorators;\n/** @type {?} */\nSwalComponent.prototype.title;\n/** @type {?} */\nSwalComponent.prototype.titleText;\n/** @type {?} */\nSwalComponent.prototype.text;\n/** @type {?} */\nSwalComponent.prototype.html;\n/** @type {?} */\nSwalComponent.prototype.footer;\n/** @type {?} */\nSwalComponent.prototype.type;\n/** @type {?} */\nSwalComponent.prototype.backdrop;\n/** @type {?} */\nSwalComponent.prototype.toast;\n/** @type {?} */\nSwalComponent.prototype.target;\n/** @type {?} */\nSwalComponent.prototype.input;\n/** @type {?} */\nSwalComponent.prototype.width;\n/** @type {?} */\nSwalComponent.prototype.padding;\n/** @type {?} */\nSwalComponent.prototype.background;\n/** @type {?} */\nSwalComponent.prototype.position;\n/** @type {?} */\nSwalComponent.prototype.grow;\n/** @type {?} */\nSwalComponent.prototype.customClass;\n/** @type {?} */\nSwalComponent.prototype.timer;\n/** @type {?} */\nSwalComponent.prototype.animation;\n/** @type {?} */\nSwalComponent.prototype.allowOutsideClick;\n/** @type {?} */\nSwalComponent.prototype.allowEscapeKey;\n/** @type {?} */\nSwalComponent.prototype.allowEnterKey;\n/** @type {?} */\nSwalComponent.prototype.showConfirmButton;\n/** @type {?} */\nSwalComponent.prototype.showCancelButton;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonText;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonText;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonColor;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonColor;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonClass;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonClass;\n/** @type {?} */\nSwalComponent.prototype.confirmButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.cancelButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.buttonsStyling;\n/** @type {?} */\nSwalComponent.prototype.reverseButtons;\n/** @type {?} */\nSwalComponent.prototype.focusConfirm;\n/** @type {?} */\nSwalComponent.prototype.focusCancel;\n/** @type {?} */\nSwalComponent.prototype.showCloseButton;\n/** @type {?} */\nSwalComponent.prototype.closeButtonAriaLabel;\n/** @type {?} */\nSwalComponent.prototype.showLoaderOnConfirm;\n/** @type {?} */\nSwalComponent.prototype.preConfirm;\n/** @type {?} */\nSwalComponent.prototype.imageUrl;\n/** @type {?} */\nSwalComponent.prototype.imageWidth;\n/** @type {?} */\nSwalComponent.prototype.imageHeight;\n/** @type {?} */\nSwalComponent.prototype.imageAlt;\n/** @type {?} */\nSwalComponent.prototype.imageClass;\n/** @type {?} */\nSwalComponent.prototype.inputPlaceholder;\n/** @type {?} */\nSwalComponent.prototype.inputValue;\n/** @type {?} */\nSwalComponent.prototype.inputOptions;\n/** @type {?} */\nSwalComponent.prototype.inputAutoTrim;\n/** @type {?} */\nSwalComponent.prototype.inputAttributes;\n/** @type {?} */\nSwalComponent.prototype.inputValidator;\n/** @type {?} */\nSwalComponent.prototype.inputClass;\n/** @type {?} */\nSwalComponent.prototype.progressSteps;\n/** @type {?} */\nSwalComponent.prototype.currentProgressStep;\n/** @type {?} */\nSwalComponent.prototype.progressStepsDistance;\n/**\n * Emits a BeforeOpenEvent when the modal DOM element has been created.\n * Useful to perform DOM mutations before the modal is shown.\n * @type {?}\n */\nSwalComponent.prototype.beforeOpen;\n/**\n * Emits an OpenEvent when the modal is shown.\n * @type {?}\n */\nSwalComponent.prototype.open;\n/**\n * Emits a CloseEvent when modal get closed.\n * @type {?}\n */\nSwalComponent.prototype.close;\n/**\n * Emits when the user clicks \"Confirm\".\n * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n * \n * Example:\n *     public handleConfirm(email: string): void {\n *         // ... save user email\n *     }\n * @type {?}\n */\nSwalComponent.prototype.confirm;\n/**\n * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n * value of a rejected \"preConfirm\".\n * \n * Example:\n *     public handleCancel(reason: string): void {\n *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n *         // ... do something\n *     }\n * @type {?}\n */\nSwalComponent.prototype.cancel;\n/** @type {?} */\nSwalComponent.prototype.nativeSwal;\n/** @type {?} */\nSwalComponent.prototype.isCurrentlyShown;\n/** @type {?} */\nSwalComponent.prototype.touchedProps;\n/** @type {?} */\nSwalComponent.prototype.markTouched;\n/** @type {?} */\nSwalComponent.prototype.defaultSwalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const /** @type {?} */ SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n/**\n * @param {?=} options\n * @return {?}\n */\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import swal from 'sweetalert2';\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\npublic readonly title = () => swal.getTitle();\npublic readonly content = () => swal.getContent();\n/**\n * @deprecated Will be removed in the next major version, please use {\\@link SwalPartialTargets#actions} instead.\n */\npublic readonly buttonsWrapper = () => swal.getButtonsWrapper();\npublic readonly actions = () => swal.getActions();\npublic readonly confirmButton = () => swal.getConfirmButton();\npublic readonly cancelButton = () => swal.getCancelButton();\npublic readonly footer = () => swal.getFooter();\n}\n\nfunction SwalPartialTargets_tsickle_Closure_declarations() {\n/** @type {?} */\nSwalPartialTargets.prototype.title;\n/** @type {?} */\nSwalPartialTargets.prototype.content;\n/**\n * @deprecated Will be removed in the next major version, please use {\\@link SwalPartialTargets#actions} instead.\n * @type {?}\n */\nSwalPartialTargets.prototype.buttonsWrapper;\n/** @type {?} */\nSwalPartialTargets.prototype.actions;\n/** @type {?} */\nSwalPartialTargets.prototype.confirmButton;\n/** @type {?} */\nSwalPartialTargets.prototype.cancelButton;\n/** @type {?} */\nSwalPartialTargets.prototype.footer;\n}\n\n"],"names":["swal"],"mappings":"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"}

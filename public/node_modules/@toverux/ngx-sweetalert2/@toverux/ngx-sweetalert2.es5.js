import swal from 'sweetalert2';
import { ApplicationRef, ChangeDetectionStrategy, Component, ComponentFactoryResolver, Directive, EventEmitter, Host, HostListener, Inject, InjectionToken, Injector, Input, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * Represents an object of targets for <swal> partials (use with *swalPartial directive).
 * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
var SwalPartialTargets = /** @class */ (function () {
    function SwalPartialTargets() {
        this.title = function () { return swal.getTitle(); };
        this.content = function () { return swal.getContent(); };
        /**
         * @deprecated Will be removed in the next major version, please use {\@link SwalPartialTargets#actions} instead.
         */
        this.buttonsWrapper = function () { return swal.getButtonsWrapper(); };
        this.actions = function () { return swal.getActions(); };
        this.confirmButton = function () { return swal.getConfirmButton(); };
        this.cancelButton = function () { return swal.getCancelButton(); };
        this.footer = function () { return swal.getFooter(); };
    }
    return SwalPartialTargets;
}());
var SwalDefaults = new InjectionToken('SwalDefaults');
/**
 * @param {?=} options
 * @return {?}
 */
function swalDefaultsProvider(options) {
    if (options === void 0) { options = {}; }
    return {
        provide: SwalDefaults,
        useValue: options
    };
}
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of \@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe.
 *
 * /!\ Some SweetAlert options aren't \@Inputs but \@Outputs: onBeforeOpen, onOpen, and onClose (without "on*" prefix).
 *     However, preConfirm and inputValidtor are still \@Inputs because there are not event handlers, there can't be
 *     multiple listeners and we need the Promise they must return.
 *
 * /!\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have
 *     an \@Input(). That's because they are deprecated and not using the default value of these parameters leads to
 *     clunky control flow. They are supported (use [options]="{}"), but please don't use them.
 */
var SwalComponent = /** @class */ (function () {
    /**
     * @param {?} defaultSwalOptions
     */
    function SwalComponent(defaultSwalOptions) {
        this.defaultSwalOptions = defaultSwalOptions;
        /**
         * Emits a BeforeOpenEvent when the modal DOM element has been created.
         * Useful to perform DOM mutations before the modal is shown.
         */
        this.beforeOpen = new EventEmitter();
        /**
         * Emits an OpenEvent when the modal is shown.
         */
        this.open = new EventEmitter();
        /**
         * Emits a CloseEvent when modal get closed.
         */
        this.close = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
         * value of a rejected "preConfirm".
         *
         * Example:
         *     public handleCancel(reason: string): void {
         *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
        this.nativeSwal = swal;
        this.isCurrentlyShown = false;
        this.touchedProps = new Set();
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        //=> Force `this` scope of show() on this component
        //   Useful for doing things like (click)="mySwal.show()".
        this.show = this.show.bind(this);
    }
    Object.defineProperty(SwalComponent.prototype, "options", {
        /**
         * @return {?}
         */
        get: function () {
            var _this = this;
            var /** @type {?} */ options = {};
            //=> We will compute the options object based on the option keys that are known to have changed.
            // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding
            // side effects.
            this.touchedProps.forEach(function (prop) {
                options[prop] = ((_this))[prop];
            });
            return options;
        },
        /**
         * An object of SweetAlert2 native options, useful if:
         *  - you don't want to use the \@Inputs for practical/philosophical reasons ;
         *  - there are missing \@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
         *
         * /!\ Be aware that the options defined in this object will override the \@Inputs of the same name.
         * @param {?} options
         * @return {?}
         */
        set: function (options) {
            Object.assign(this, options);
            Object.keys(options).forEach(this.markTouched);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    SwalComponent.prototype.ngOnChanges = function (changes) {
        Object.keys(changes)
            .filter(function (prop) { return prop !== 'options'; })
            .forEach(this.markTouched);
    };
    /**
     * @return {?}
     */
    SwalComponent.prototype.ngOnDestroy = function () {
        if (this.isCurrentlyShown) {
            swal.close();
        }
    };
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     * @return {?}
     */
    SwalComponent.prototype.show = function () {
        var _this = this;
        //=> Build the SweetAlert2 options
        var /** @type {?} */ options = Object.assign({}, this.defaultSwalOptions, this.options, {
            //=> Handle modal lifecycle events
            onBeforeOpen: function (modalElement) {
                _this.beforeOpen.emit({ modalElement: modalElement });
            }, onOpen: function (modalElement) {
                _this.isCurrentlyShown = true;
                _this.open.emit({ modalElement: modalElement });
            }, onClose: function (modalElement) {
                _this.isCurrentlyShown = false;
                _this.close.emit({ modalElement: modalElement });
            }
        });
        //=> Show the Swal!
        var /** @type {?} */ promise = swal(options);
        //=> Handle (confirm) and (cancel) @Outputs
        promise.then(function (result) {
            // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions
            if (options.useRejections) {
                _this.confirm.emit(result);
            }
            else if ('value' in result) {
                _this.confirm.emit(result.value);
            }
            else {
                _this.cancel.emit(result.dismiss);
            }
        }, function (err) {
            // noinspection JSDeprecatedSymbols - support for old SweetAlert2 versions
            if (options.useRejections) {
                _this.cancel.emit(err);
            }
        });
        //=> Return the unaltered promise
        return promise;
    };
    return SwalComponent;
}());
SwalComponent.decorators = [
    { type: Component, args: [{
                selector: 'swal',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
SwalComponent.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [SwalDefaults,] },] },
]; };
SwalComponent.propDecorators = {
    'title': [{ type: Input },],
    'titleText': [{ type: Input },],
    'text': [{ type: Input },],
    'html': [{ type: Input },],
    'footer': [{ type: Input },],
    'type': [{ type: Input },],
    'backdrop': [{ type: Input },],
    'toast': [{ type: Input },],
    'target': [{ type: Input },],
    'input': [{ type: Input },],
    'width': [{ type: Input },],
    'padding': [{ type: Input },],
    'background': [{ type: Input },],
    'position': [{ type: Input },],
    'grow': [{ type: Input },],
    'customClass': [{ type: Input },],
    'timer': [{ type: Input },],
    'animation': [{ type: Input },],
    'allowOutsideClick': [{ type: Input },],
    'allowEscapeKey': [{ type: Input },],
    'allowEnterKey': [{ type: Input },],
    'showConfirmButton': [{ type: Input },],
    'showCancelButton': [{ type: Input },],
    'confirmButtonText': [{ type: Input },],
    'cancelButtonText': [{ type: Input },],
    'confirmButtonColor': [{ type: Input },],
    'cancelButtonColor': [{ type: Input },],
    'confirmButtonClass': [{ type: Input },],
    'cancelButtonClass': [{ type: Input },],
    'confirmButtonAriaLabel': [{ type: Input },],
    'cancelButtonAriaLabel': [{ type: Input },],
    'buttonsStyling': [{ type: Input },],
    'reverseButtons': [{ type: Input },],
    'focusConfirm': [{ type: Input },],
    'focusCancel': [{ type: Input },],
    'showCloseButton': [{ type: Input },],
    'closeButtonAriaLabel': [{ type: Input },],
    'showLoaderOnConfirm': [{ type: Input },],
    'preConfirm': [{ type: Input },],
    'imageUrl': [{ type: Input },],
    'imageWidth': [{ type: Input },],
    'imageHeight': [{ type: Input },],
    'imageAlt': [{ type: Input },],
    'imageClass': [{ type: Input },],
    'inputPlaceholder': [{ type: Input },],
    'inputValue': [{ type: Input },],
    'inputOptions': [{ type: Input },],
    'inputAutoTrim': [{ type: Input },],
    'inputAttributes': [{ type: Input },],
    'inputValidator': [{ type: Input },],
    'inputClass': [{ type: Input },],
    'progressSteps': [{ type: Input },],
    'currentProgressStep': [{ type: Input },],
    'progressStepsDistance': [{ type: Input },],
    'beforeOpen': [{ type: Output },],
    'open': [{ type: Output },],
    'close': [{ type: Output },],
    'confirm': [{ type: Output },],
    'cancel': [{ type: Output },],
    'options': [{ type: Input },],
};
/**
 * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:
 *
 * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:
 *
 *    <button [swal]="['Title', 'Text']">Click me</button>
 *
 * 2) A native SweetAlert2 options object, ex:
 *
 *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
 *
 * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
 *
 *    <button [swal]="mySwal">Click me</button>
 *    <swal #mySwal title="Title" text="Text"></swal>
 */
var SwalDirective = /** @class */ (function () {
    /**
     * @param {?} viewContainerRef
     * @param {?} resolver
     */
    function SwalDirective(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
         * value of a rejected "preConfirm".
         *
         * Example:
         *     public handleCancel(reason: string): void {
         *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
    }
    Object.defineProperty(SwalDirective.prototype, "swal", {
        /**
         * SweetAlert2 options or a SwalComponent instance.
         * See the class doc block for more informations.
         * @param {?} swal
         * @return {?}
         */
        set: function (swal$$1) {
            if (swal$$1 instanceof SwalComponent) {
                this.swalInstance = swal$$1;
            }
            else if (Array.isArray(swal$$1)) {
                this.swalOptions = {};
                this.swalOptions.title = swal$$1[0], this.swalOptions.text = swal$$1[1], this.swalOptions.type = swal$$1[2];
            }
            else {
                this.swalOptions = swal$$1;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     * @return {?}
     */
    SwalDirective.prototype.ngOnInit = function () {
        if (!this.swalInstance) {
            var /** @type {?} */ factory = this.resolver.resolveComponentFactory(SwalComponent);
            this.swalRef = this.viewContainerRef.createComponent(factory);
            this.swalInstance = this.swalRef.instance;
        }
    };
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).
     * @return {?}
     */
    SwalDirective.prototype.ngOnDestroy = function () {
        if (this.swalRef) {
            this.swalRef.destroy();
        }
    };
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     * @param {?} event
     * @return {?}
     */
    SwalDirective.prototype.onHostClicked = function (event) {
        var _this = this;
        event.preventDefault();
        event.stopImmediatePropagation();
        event.stopPropagation();
        if (this.swalOptions) {
            this.swalInstance.options = this.swalOptions;
        }
        var /** @type {?} */ confirmSub = this.swalInstance.confirm.asObservable().subscribe(function (v) { return _this.confirm.emit(v); });
        var /** @type {?} */ cancelSub = this.swalInstance.cancel.asObservable().subscribe(function (v) { return _this.cancel.emit(v); });
        this.swalInstance.show().then(unsubscribe);
        /**
         * @return {?}
         */
        function unsubscribe() {
            confirmSub.unsubscribe();
            cancelSub.unsubscribe();
        }
    };
    return SwalDirective;
}());
SwalDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swal]'
            },] },
];
/**
 * @nocollapse
 */
SwalDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
]; };
SwalDirective.propDecorators = {
    'swal': [{ type: Input },],
    'confirm': [{ type: Output },],
    'cancel': [{ type: Output },],
    'onHostClicked': [{ type: HostListener, args: ['click', ['$event'],] },],
};
/**
 * \@internal
 * Holds a consumer's Angular template and displays it on a Sweet Alert.
 * See SwalPartialDirective for info about the covered feature.
 */
var SwalPartialComponent = /** @class */ (function () {
    function SwalPartialComponent() {
    }
    return SwalPartialComponent;
}());
SwalPartialComponent.decorators = [
    { type: Component, args: [{
                template: '<ng-container *ngTemplateOutlet="template"></ng-container>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
SwalPartialComponent.ctorParameters = function () { return []; };
SwalPartialComponent.propDecorators = {
    'template': [{ type: Input },],
};
/**
 * A structural directive that lets you use Angular templates inside of Sweet Alerts.
 * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.
 * The default target is the content zone.
 *
 * Usage in your component's TypeScript code-behind (if you use another target than "content"):
 *
 *     \@Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPartialTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPartial [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPartial="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
var SwalPartialDirective = /** @class */ (function () {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} app
     * @param {?} templateRef
     * @param {?} swalTargets
     * @param {?} swalComponent
     */
    function SwalPartialDirective(resolver, injector, app, templateRef, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
    }
    /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     * @return {?}
     */
    SwalPartialDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(function () {
            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert
            var /** @type {?} */ targetEl = _this.swalPartial ? _this.swalPartial() : _this.swalTargets.content();
            var /** @type {?} */ factory = _this.resolver.resolveComponentFactory(SwalPartialComponent);
            _this.partialRef = factory.create(_this.injector, [], targetEl);
            //=> Apply the consumer's template on the component
            _this.partialRef.instance.template = _this.templateRef;
            //=> Make the Angular app aware of that detached view so change detection works
            _this.app.attachView(_this.partialRef.hostView);
        });
        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(function () {
            //=> Detach the partial component from the app and destroy it
            _this.app.detachView(_this.partialRef.hostView);
            _this.partialRef.destroy();
        });
    };
    /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     * @return {?}
     */
    SwalPartialDirective.prototype.ngOnDestroy = function () {
        this.beforeOpenSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
    };
    return SwalPartialDirective;
}());
SwalPartialDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swalPartial]'
            },] },
];
/**
 * @nocollapse
 */
SwalPartialDirective.ctorParameters = function () { return [
    { type: ComponentFactoryResolver, },
    { type: Injector, },
    { type: ApplicationRef, },
    { type: TemplateRef, },
    { type: SwalPartialTargets, },
    { type: SwalComponent, decorators: [{ type: Host },] },
]; };
SwalPartialDirective.propDecorators = {
    'swalPartial': [{ type: Input },],
};
var SweetAlert2Module = /** @class */ (function () {
    function SweetAlert2Module() {
    }
    /**
     * @param {?=} defaultSwalOptions
     * @return {?}
     */
    SweetAlert2Module.forRoot = function (defaultSwalOptions) {
        return {
            ngModule: SweetAlert2Module,
            providers: [swalDefaultsProvider(defaultSwalOptions)]
        };
    };
    return SweetAlert2Module;
}());
SweetAlert2Module.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SwalComponent, SwalPartialDirective, SwalPartialComponent,
                    SwalDirective
                ],
                providers: [
                    SwalPartialTargets
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    SwalComponent, SwalPartialDirective,
                    SwalDirective
                ],
                entryComponents: [
                    SwalComponent, SwalPartialComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
SweetAlert2Module.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { SwalPartialTargets, SwalComponent, SwalDirective, SwalPartialDirective, SweetAlert2Module, SwalDefaults as ɵa, swalDefaultsProvider as ɵb, SwalPartialComponent as ɵc };
//# sourceMappingURL=ngx-sweetalert2.es5.js.map
